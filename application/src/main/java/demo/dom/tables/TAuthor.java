/**
 * This class is generated by jOOQ
 */
package demo.dom.tables;


import demo.dom.Keys;
import demo.dom.TPublic;
import demo.dom.tables.records.RAuthorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAuthor extends TableImpl<demo.dom.tables.records.RAuthorRecord> {

	private static final long serialVersionUID = -852503732;

	/**
	 * The reference instance of <code>PUBLIC.AUTHOR</code>
	 */
	public static final TAuthor AUTHOR = new TAuthor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<demo.dom.tables.records.RAuthorRecord> getRecordType() {
		return demo.dom.tables.records.RAuthorRecord.class;
	}

	/**
	 * The column <code>PUBLIC.AUTHOR.ID</code>.
	 */
	public final TableField<demo.dom.tables.records.RAuthorRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.AUTHOR.NAME</code>.
	 */
	public final TableField<demo.dom.tables.records.RAuthorRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.AUTHOR</code> table reference
	 */
	public TAuthor() {
		this("AUTHOR", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.AUTHOR</code> table reference
	 */
	public TAuthor(String alias) {
		this(alias, AUTHOR);
	}

	private TAuthor(String alias, Table<demo.dom.tables.records.RAuthorRecord> aliased) {
		this(alias, aliased, null);
	}

	private TAuthor(String alias, Table<demo.dom.tables.records.RAuthorRecord> aliased, Field<?>[] parameters) {
		super(alias, demo.dom.TPublic.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<demo.dom.tables.records.RAuthorRecord, Long> getIdentity() {
		return demo.dom.Keys.IDENTITY_AUTHOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<demo.dom.tables.records.RAuthorRecord> getPrimaryKey() {
		return demo.dom.Keys.PK_AUTHOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<demo.dom.tables.records.RAuthorRecord>> getKeys() {
		return Arrays.<UniqueKey<demo.dom.tables.records.RAuthorRecord>>asList(demo.dom.Keys.PK_AUTHOR);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TAuthor as(String alias) {
		return new TAuthor(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TAuthor rename(String name) {
		return new TAuthor(name, null);
	}
}
